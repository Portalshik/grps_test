// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.2
// source: proto/auth.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserAdmin_CreateUser_FullMethodName = "/auth.UserAdmin/CreateUser"
	UserAdmin_DeleteUser_FullMethodName = "/auth.UserAdmin/DeleteUser"
	UserAdmin_ExistsUser_FullMethodName = "/auth.UserAdmin/ExistsUser"
)

// UserAdminClient is the client API for UserAdmin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserAdminClient interface {
	CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Token, error)
	DeleteUser(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Status, error)
	ExistsUser(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Status, error)
}

type userAdminClient struct {
	cc grpc.ClientConnInterface
}

func NewUserAdminClient(cc grpc.ClientConnInterface) UserAdminClient {
	return &userAdminClient{cc}
}

func (c *userAdminClient) CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Token, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Token)
	err := c.cc.Invoke(ctx, UserAdmin_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAdminClient) DeleteUser(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Status)
	err := c.cc.Invoke(ctx, UserAdmin_DeleteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAdminClient) ExistsUser(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Status)
	err := c.cc.Invoke(ctx, UserAdmin_ExistsUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserAdminServer is the server API for UserAdmin service.
// All implementations must embed UnimplementedUserAdminServer
// for forward compatibility.
type UserAdminServer interface {
	CreateUser(context.Context, *User) (*Token, error)
	DeleteUser(context.Context, *Token) (*Status, error)
	ExistsUser(context.Context, *Token) (*Status, error)
	mustEmbedUnimplementedUserAdminServer()
}

// UnimplementedUserAdminServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserAdminServer struct{}

func (UnimplementedUserAdminServer) CreateUser(context.Context, *User) (*Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUserAdminServer) DeleteUser(context.Context, *Token) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUserAdminServer) ExistsUser(context.Context, *Token) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistsUser not implemented")
}
func (UnimplementedUserAdminServer) mustEmbedUnimplementedUserAdminServer() {}
func (UnimplementedUserAdminServer) testEmbeddedByValue()                   {}

// UnsafeUserAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserAdminServer will
// result in compilation errors.
type UnsafeUserAdminServer interface {
	mustEmbedUnimplementedUserAdminServer()
}

func RegisterUserAdminServer(s grpc.ServiceRegistrar, srv UserAdminServer) {
	// If the following call pancis, it indicates UnimplementedUserAdminServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserAdmin_ServiceDesc, srv)
}

func _UserAdmin_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAdminServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAdmin_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAdminServer).CreateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAdmin_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAdminServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAdmin_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAdminServer).DeleteUser(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAdmin_ExistsUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAdminServer).ExistsUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAdmin_ExistsUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAdminServer).ExistsUser(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

// UserAdmin_ServiceDesc is the grpc.ServiceDesc for UserAdmin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserAdmin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.UserAdmin",
	HandlerType: (*UserAdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _UserAdmin_CreateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UserAdmin_DeleteUser_Handler,
		},
		{
			MethodName: "ExistsUser",
			Handler:    _UserAdmin_ExistsUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/auth.proto",
}

const (
	UserAction_AddFile_FullMethodName      = "/auth.UserAction/AddFile"
	UserAction_GetUserFiles_FullMethodName = "/auth.UserAction/GetUserFiles"
)

// UserActionClient is the client API for UserAction service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserActionClient interface {
	AddFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[File, Status], error)
	GetUserFiles(ctx context.Context, in *Token, opts ...grpc.CallOption) (grpc.ServerStreamingClient[File], error)
}

type userActionClient struct {
	cc grpc.ClientConnInterface
}

func NewUserActionClient(cc grpc.ClientConnInterface) UserActionClient {
	return &userActionClient{cc}
}

func (c *userActionClient) AddFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[File, Status], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &UserAction_ServiceDesc.Streams[0], UserAction_AddFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[File, Status]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UserAction_AddFileClient = grpc.ClientStreamingClient[File, Status]

func (c *userActionClient) GetUserFiles(ctx context.Context, in *Token, opts ...grpc.CallOption) (grpc.ServerStreamingClient[File], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &UserAction_ServiceDesc.Streams[1], UserAction_GetUserFiles_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Token, File]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UserAction_GetUserFilesClient = grpc.ServerStreamingClient[File]

// UserActionServer is the server API for UserAction service.
// All implementations must embed UnimplementedUserActionServer
// for forward compatibility.
type UserActionServer interface {
	AddFile(grpc.ClientStreamingServer[File, Status]) error
	GetUserFiles(*Token, grpc.ServerStreamingServer[File]) error
	mustEmbedUnimplementedUserActionServer()
}

// UnimplementedUserActionServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserActionServer struct{}

func (UnimplementedUserActionServer) AddFile(grpc.ClientStreamingServer[File, Status]) error {
	return status.Errorf(codes.Unimplemented, "method AddFile not implemented")
}
func (UnimplementedUserActionServer) GetUserFiles(*Token, grpc.ServerStreamingServer[File]) error {
	return status.Errorf(codes.Unimplemented, "method GetUserFiles not implemented")
}
func (UnimplementedUserActionServer) mustEmbedUnimplementedUserActionServer() {}
func (UnimplementedUserActionServer) testEmbeddedByValue()                    {}

// UnsafeUserActionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserActionServer will
// result in compilation errors.
type UnsafeUserActionServer interface {
	mustEmbedUnimplementedUserActionServer()
}

func RegisterUserActionServer(s grpc.ServiceRegistrar, srv UserActionServer) {
	// If the following call pancis, it indicates UnimplementedUserActionServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserAction_ServiceDesc, srv)
}

func _UserAction_AddFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserActionServer).AddFile(&grpc.GenericServerStream[File, Status]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UserAction_AddFileServer = grpc.ClientStreamingServer[File, Status]

func _UserAction_GetUserFiles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Token)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserActionServer).GetUserFiles(m, &grpc.GenericServerStream[Token, File]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UserAction_GetUserFilesServer = grpc.ServerStreamingServer[File]

// UserAction_ServiceDesc is the grpc.ServiceDesc for UserAction service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserAction_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.UserAction",
	HandlerType: (*UserActionServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AddFile",
			Handler:       _UserAction_AddFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetUserFiles",
			Handler:       _UserAction_GetUserFiles_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/auth.proto",
}
